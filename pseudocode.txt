Import flask, datetime, json, hashlib

Class Blockchain:

    Initialize():
        self.chain = []
        self.create_block(proof = 1, previous_hash = '0')

    Create_block(proof, previous_hash):
        block = {
            'index': len(self.chain) + 1,
            'timestamp': str(datetime.datetime.now()),
            'proof': proof,
            'previous_hash': previous_hash
        }
        Append block to the chain
        Return block

    Get_previous_block():
        Return the last block in the chain

    Proof_of_work(previous_proof):
        new_proof = 1
        check_proof = False
        While check_proof is False:
            hash_operation = hashlib.sha256(str(new_proof**2 - previous_proof**2).encode()).hexdigest()
            If hash_operation[:4] == '0000':
                check_proof = True
            Else:
                new_proof += 1
        Return new_proof

    Hash(block):
        encoded_block = json.dumps(block, sort_keys = True).encode()
        Return the SHA-256 hash of the encoded block

    Is_chain_valid(chain):
        previous_block = chain[0]
        block_index = 1
        While block_index < len(chain):
            block = chain[block_index]
            If block['previous_hash'] != hash(previous_block):
                Return False
            previous_proof = previous_block['proof']
            proof = block['proof']
            hash_operation = hashlib.sha256(str(proof**2 - previous_proof**2).encode()).hexdigest()
            If hash_operation[:4] != '0000':
                Return False
            previous_block = block
            block_index += 1
        Return True


Import datetime, hashlib, json, and Flask

Create a Flask app

Create a Blockchain object

@app.route('/mine_block', methods = ['GET'])
Define the mine_block function:
    previous_block = blockchain.get_previous_block()
    previous_proof = previous_block['proof']
    proof = blockchain.proof_of_work(previous_proof)
    previous_hash = blockchain.hash(previous_block)
    block = blockchain.create_block(proof, previous_hash)
    response = {
        'message': 'Congratulations, you just mined a block!',
        'index': block['index'],
        'timestamp': block['timestamp'],
        'proof': block['proof'],
        'previous_hash': block['previous_hash']
    }
    Return the response with a status code of 200


@app.route('/get_chain', methods = ['GET'])
Define the get_chain function:
    response = {
        'chain': blockchain.chain,
        'length': len(blockchain.chain)
    }
    Return the response with a status code of 200


@app.route('/is_valid', methods = ['GET'])
Define the is_valid function:
    is_valid = blockchain.is_chain_valid(blockchain.chain)
    If is_valid:
        response = {'message': 'All good. The Blockchain is valid.'}
    Else:
        response = {'message': 'Houston, we have a problem. The Blockchain is not valid.'}
    Return the response with a status code of 200


app.run(host = '0.0.0.0', port = 5000)

Import unittest and requests

Define a TestBlockchain class that inherits from unittest.TestCase:
    Define the setUp function that initializes the base URL, headers, and a Blockchain object

    Define the test_mine_block function that tests mining a block:
        Send a GET request to the /mine_block endpoint
        Assert that the response has a status code of 200
        Assert that the response contains the expected keys in the block dictionary

    Define the test_get_chain function that tests getting the blockchain:
